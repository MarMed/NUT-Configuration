# Network UPS Tools: Master upssched.conf
# verson 1.0
#
# ============================================================================
# Original: https://github.com/networkupstools/nut/blob/master/conf/upssched.conf.sample.in
# ============================================================================

# This script gets called to invoke commands for timers that trigger.
# It is given a single argument - the <timername> in your
# AT ... START-TIMER defines (see below).

CMDSCRIPT "/etc/nut/upssched-cmd"

# --------------------------------------------------------------------------

# This sets the file name of the FIFO that will pass communications between
# processes to start and stop timers. 

PIPEFN "/etc/nut/upssched.pipe"

# --------------------------------------------------------------------------

# upssched needs to be able to create this filename in order to avoid
# a race condition when two events are dispatched from upsmon at nearly
# the same time.  This file will only exist briefly.  It must not be
# created by any other process.
#
# You should put this in the same directory as PIPEFN.

LOCKFN "/etc/nut/upssched.lock"

# --------------------------------------------------------------------------

# Define a handler for a specific event <notifytype> on UPS <upsname>.
#
# The general form is:
#
# AT <notifytype> <upsname> <command>
#
# upsname: can be a specific UPS or the special value * to apply this handler
#   to every possible value of <upsname>.
#
# command: execute via your CMDSCRIPT when event happens. Valid commands are:
#   START-TIMER <timername> <interval>
#       Start a timer called <timername> that will trigger after <interval>
#       seconds, calling your CMDSCRIPT with <timername> as the first argument.
#   CANCEL-TIMER <timername> [cmd]
#       Cancel a running timer called <timername>, if possible. If the timer
#       has passed then pass the optional argument <cmd> to CMDSCRIPT.
#   EXECUTE <command>
#       Immediately pass <command> as an argument to CMDSCRIPT.
 
# Will start the timer "on_battery" if any monitors send an ONBATT event
# If the timer reachs zero it will execute "on_battery" in the CMDSCRIPT script
AT ONBATT * START-TIMER on_battery 300

# Will cancel the timer "on_battery" if any monitors send an ONLINE event and execute
# "on_line" in the CMDSCRIPT script
AT ONLINE * CANCEL-TIMER on_battery on_line

# Will execute "low_battery" in the CMDSCRIPT script if any monitors send a LOWBATT event
AT LOWBATT * EXECUTE low_battery

# Will start the timer "communications_bad" if any monitors send a COMMBAD event
# If the timer reachs zero it will execute "communications_bad" in the CMDSCRIPT script
AT COMMBAD * START-TIMER communications_bad 30

# Will cancel the timer "communications_bad" if any monitors send an COMMOK event and execute
# "communications_ok" in the CMDSCRIPT script
AT COMMOK * CANCEL-TIMER communications_bad communications_ok

# Will start the timer "communications_bad" if any monitors send a NOCOMM event
# If the timer reachs zero it will execute "communications_bad" in the CMDSCRIPT script
AT NOCOMM * START-TIMER communications_bad 30

# Will execute "powerdown" in the CMDSCRIPT script if any monitors send a SHUTDOWN event
AT SHUTDOWN * EXECUTE powerdown

# Will execute "replace_battery" in the CMDSCRIPT script if any monitors send a REPLBATT event
AT REPLBATT * EXECUTE replace_battery

# Will execute "forced_shutdown" in the CMDSCRIPT script if any monitors send a FSD event
AT FSD * EXECUTE forced_shutdown
