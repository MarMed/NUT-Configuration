#!/bin/bash
# perform actions depending on UPS event
#
# Verson 1.0

main() {

	# array of email addresses to notify 
	notification_addresses=( techops@serrc.org )

	# get status info of UPS
	ups_status=$(upsc ${UPSNAME} > /dev/stdout 2> /dev/null)
	ups_log=$(cat /var/log/messages | grep -i ups | tail -50)
	ups_name="${UPSNAME%@*}"

	case $1 in

		replace_battery)
			notification_subject="Bad Battery"
			notification_body="UPS ${ups_name} has a bad battery, replacement necessary"
			send_notification_email "${notification_subject}" "${notification_body}"
		;;

		on_battery
			notification_subject="On Battery"
			notification_body="UPS ${ups_name} has been on battery for over five minutes"
			send_notification_email "${notification_subject}" "${notification_body}"
			touch /etc/nut/shutdown.key
		;;

		low_battery)
			notification_subject="Low Battery"
			notification_body="UPS ${ups_name} battery is getting low. Client shutdown will happen soon"
			send_notification_email "${notification_subject}" "${notification_body}"
			touch /etc/nut/shutdown.key
		;;

		forced_shutdown)
			notification_subject="Forced Shutdown in progress"
			notification_body="UPS ${ups_name} is forcing shutdown of this system"
			send_notification_email "${notification_subject}" "${notification_body}"
		;;

		powerdown)
			notification_subject="System Shutdown"
			notification_body="Battery critically low, UPS ${ups_name} is shuting down"
			send_notification_email "${notification_subject}" "${notification_body}"
		;;

		on_line)
			notification_subject="Power Restored"
			notification_body="Power has been restored to UPS ${ups_name}."
			send_notification_email "${notification_subject}" "${notification_body}"
		;;

		communications_bad)
			notification_subject="Communication Lost"
			notification_body="Communications with the UPS ${ups_name} are lost"
			send_notification_email "${notification_subject}" "${notification_body}"
		;;

		communications_ok)
			notification_subject="Communication Restored"
			notification_body="Communications with the UPS ${ups_name} are established"
			send_notification_email "${notification_subject}" "${notification_body}"
		;;
		
		*)
			echo "invalid parameter"
		;;
	esac
	
	exit 0
}

send_notification_email () {
	# send notification email to all addresses in notification_addresses array

	domain=$(hostname -d)
	IFS=$'\n'
	for email_address in "${notification_addresses[@]}"; do
		(
		echo "From: devices@$(hostname -d)"
		echo "To: ${email_address}"
		echo "Subject: ${domain}: UPS ${ups_name} - ${1}"
		echo "Content-Type: text/html"
		echo "MIME-Version: 1.0"
		echo "<html><body>"
		echo "<br>$(date)<br><br>"
		echo "<strong>Site:</strong> $domain <br>"
		echo "<strong>Name:</strong> ${ups_name}<br><br>"
		echo "<strong>Message:</strong><br>$2<br><br>"
		echo "<hr><h3>Latest UPS status:</h3>"
		if ! [ -z "${ups_status}" ]; then
			for line in ${ups_status[@]}; do
				echo "$line<br>"
			done
		else
			echo "Not available<br>"
		fi
		echo "<hr><h3>Latest UPS log entries:</h3>"
		if ! [ -z "${ups_status}" ]; then
			for line in ${ups_log[@]}; do
				echo "$line<br>"
			done
		else
			echo "No recent log entries<br>"
		fi
		echo "</body>"
		echo "</html>"
		) | sendmail -t
	done
}

if [[ "${BASH_SOURCE[0]}" = "$0" ]]; then
  main "$@"
fi